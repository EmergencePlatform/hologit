{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hologit Documentation \u00b6 Hologit lets you declaratively define virtual sub-branches within any Git branch Quick Start Grand Tour Installation Repository Setup Holosources Holobranches Hololenses Holoreactors Workflows Work on Sources Publish a docs/ tree to Gitbook and gh-pages Publish a Static Website Operationalize a Data Set Developing an Emergence Site Reference Architecture Commands Filesystem","title":"Hologit Documentation"},{"location":"#hologit-documentation","text":"Hologit lets you declaratively define virtual sub-branches within any Git branch Quick Start Grand Tour Installation Repository Setup Holosources Holobranches Hololenses Holoreactors Workflows Work on Sources Publish a docs/ tree to Gitbook and gh-pages Publish a Static Website Operationalize a Data Set Developing an Emergence Site Reference Architecture Commands Filesystem","title":"Hologit Documentation"},{"location":"grand-tour/","text":"","title":"Index"},{"location":"grand-tour/holobranches/","text":"","title":"Holobranches"},{"location":"grand-tour/hololenses/","text":"","title":"Hololenses"},{"location":"grand-tour/holoreactors/","text":"","title":"Holoreactors"},{"location":"grand-tour/holosources/","text":"","title":"Holosources"},{"location":"grand-tour/installation/","text":"Grand Tour: Installation \u00b6 Hologit can be installed via habitat (best option in Linux environments): $ hab pkg install -b jarvus/hologit \u00bb Installing jarvus/hologit \u2601 Determining latest version of jarvus/hologit in the 'stable' channel \u2192 Using jarvus/hologit/0.4.1/20181224022822 \u2605 Install of jarvus/hologit/0.4.1/20181224022822 complete with 0 new packages installed. \u00bb Binlinking git-holo from jarvus/hologit/0.4.1/20181224022822 into /bin \u2605 Binlinked git-holo from jarvus/hologit/0.4.1/20181224022822 to /bin/git-holo or with npm (best option in Mac environments): $ git --version # ensure >= 2.8.0 git version 2.17.2 (Apple Git-113) $ node --version # ensure >= 8.3.0 v11.5.0 $ npm install -g hologit /usr/local/bin/git-holo -> /usr/local/lib/node_modules/hologit/bin/cli.js + hologit@0.4.1 updated 1 package in 1.947s Optional: watchman for working trees \u00b6 Install watchman to enable watching working trees via habitat (best option in Linux environments): $ hab pkg install -b jarvus/watchman \u00bb Installing jarvus/watchman \u2601 Determining latest version of jarvus/watchman in the 'stable' channel \u2192 Using jarvus/watchman/4.9.0/20180624025538 \u2605 Install of jarvus/watchman/4.9.0/20180624025538 complete with 0 new packages installed. \u00bb Binlinking watchman from jarvus/watchman/4.9.0/20180624025538 into /bin \u2605 Binlinked watchman from jarvus/watchman/4.9.0/20180624025538 to /bin/watchman \u00bb Binlinking watchman-make from jarvus/watchman/4.9.0/20180624025538 into /bin \u2605 Binlinked watchman-make from jarvus/watchman/4.9.0/20180624025538 to /bin/watchman-make \u00bb Binlinking watchman-wait from jarvus/watchman/4.9.0/20180624025538 into /bin \u2605 Binlinked watchman-wait from jarvus/watchman/4.9.0/20180624025538 to /bin/watchman-wait $ mkdir -m 777 -p /hab/svc/watchman/var or with homebrew (best option in Mac environments): $ brew install watchman ==> Downloading https://homebrew.bintray.com/bottles/watchman-4.9.0_2.mojave.bottle.tar.gz Already downloaded: /Users/chris/Library/Caches/Homebrew/downloads/01bca112fb1c6fe86d4068af4635ca8a47a53688bb3597c4ac5e45e49fe1de27--watchman-4.9.0_2.mojave.bottle.tar.gz ==> Pouring watchman-4.9.0_2.mojave.bottle.tar.gz ==> launchctl unload -F /Users/chris/Library/LaunchAgents/com.github.facebook.watchman.plist \ud83c\udf7a /usr/local/Cellar/watchman/4.9.0_2: 23 files, 2.1MB","title":"Grand Tour: Installation"},{"location":"grand-tour/installation/#grand-tour-installation","text":"Hologit can be installed via habitat (best option in Linux environments): $ hab pkg install -b jarvus/hologit \u00bb Installing jarvus/hologit \u2601 Determining latest version of jarvus/hologit in the 'stable' channel \u2192 Using jarvus/hologit/0.4.1/20181224022822 \u2605 Install of jarvus/hologit/0.4.1/20181224022822 complete with 0 new packages installed. \u00bb Binlinking git-holo from jarvus/hologit/0.4.1/20181224022822 into /bin \u2605 Binlinked git-holo from jarvus/hologit/0.4.1/20181224022822 to /bin/git-holo or with npm (best option in Mac environments): $ git --version # ensure >= 2.8.0 git version 2.17.2 (Apple Git-113) $ node --version # ensure >= 8.3.0 v11.5.0 $ npm install -g hologit /usr/local/bin/git-holo -> /usr/local/lib/node_modules/hologit/bin/cli.js + hologit@0.4.1 updated 1 package in 1.947s","title":"Grand Tour: Installation"},{"location":"grand-tour/installation/#optional-watchman-for-working-trees","text":"Install watchman to enable watching working trees via habitat (best option in Linux environments): $ hab pkg install -b jarvus/watchman \u00bb Installing jarvus/watchman \u2601 Determining latest version of jarvus/watchman in the 'stable' channel \u2192 Using jarvus/watchman/4.9.0/20180624025538 \u2605 Install of jarvus/watchman/4.9.0/20180624025538 complete with 0 new packages installed. \u00bb Binlinking watchman from jarvus/watchman/4.9.0/20180624025538 into /bin \u2605 Binlinked watchman from jarvus/watchman/4.9.0/20180624025538 to /bin/watchman \u00bb Binlinking watchman-make from jarvus/watchman/4.9.0/20180624025538 into /bin \u2605 Binlinked watchman-make from jarvus/watchman/4.9.0/20180624025538 to /bin/watchman-make \u00bb Binlinking watchman-wait from jarvus/watchman/4.9.0/20180624025538 into /bin \u2605 Binlinked watchman-wait from jarvus/watchman/4.9.0/20180624025538 to /bin/watchman-wait $ mkdir -m 777 -p /hab/svc/watchman/var or with homebrew (best option in Mac environments): $ brew install watchman ==> Downloading https://homebrew.bintray.com/bottles/watchman-4.9.0_2.mojave.bottle.tar.gz Already downloaded: /Users/chris/Library/Caches/Homebrew/downloads/01bca112fb1c6fe86d4068af4635ca8a47a53688bb3597c4ac5e45e49fe1de27--watchman-4.9.0_2.mojave.bottle.tar.gz ==> Pouring watchman-4.9.0_2.mojave.bottle.tar.gz ==> launchctl unload -F /Users/chris/Library/LaunchAgents/com.github.facebook.watchman.plist \ud83c\udf7a /usr/local/Cellar/watchman/4.9.0_2: 23 files, 2.1MB","title":"Optional: watchman for working trees"},{"location":"grand-tour/repository-setup/","text":"","title":"Repository setup"},{"location":"quick-start/","text":"","title":"Index"},{"location":"workflows/work-on-sources/","text":"Work on Sources \u00b6 There are currently two supported methods for working on sources concurrently with working on your project: Environmental source overrides Source submodule checkouts Of the two, environmental source overrides are the more mature feature and recommended for now. Method 1: Environmental Source Overrides (Recommended) \u00b6 Environment variables based on the names of sources can be set to override their URL, ref, and optionally holobranch: export HOLO_SOURCE_<SOURCE_NAME> = \"[url][#ref][=>holobranch]\" Source names must be uppercased and all - (hyphen) characters changed to _ (underscore). Existing values can be used by omitting values to the left, but ommitted values to the right will be cleared. The --working option currently has no effect on overridden sources: working tree changes for sources will be ignored. You\u2019ll need to commit any changes to use them in downstream builds, but you don\u2019t need to push those commits and you can rewrite/amend them continuously. For example, give a source name of skeleton-v1 : export HOLO_SOURCE_SKELETON_V1 = \"=>emergence-vfs-site\" # use existing url+ref, override holobranch export HOLO_SOURCE_SKELETON_V1 = \"=>\" # use existing url+ref, clear holobranch export HOLO_SOURCE_SKELETON_V1 = \"#refs/heads/develop\" # use existing url, change ref, clear holobranch export HOLO_SOURCE_SKELETON_V1 = \"#refs/heads/develop=>emergence-skeleton\" # use existing url, change ref, keep holobranch export HOLO_SOURCE_SKELETON_V1 = \"/src/skeleton-v1\" # change url, clear ref+holobranch export HOLO_SOURCE_SKELETON_V1 = \"/src/skeleton-v1#refs/heads/develop=>emergence-skeleton\" # change url+ref, keep holobranch Environmental source overrides will be honored at every depth when using subprojections as sources, so while working on a project using skeleton-v2 as a source, you could work on skeleton-v2 and its source skeleton-v1 simultaneously: export HOLO_SOURCE_SKELETON_V2 = \"/src/skeleton-v2#refs/heads/develop=>emergence-skeleton\" export HOLO_SOURCE_SKELETON_V1 = \"/src/skeleton-v1#refs/heads/develop=>emergence-skeleton\" While working like this, you likely also want to environmentally instruct all hologit commands to always fetch the latest for these sources. This won\u2019t add an appreciable delay for local sources, but could slow down working against remote sources that aren\u2019t changing anyway: export HOLO_FETCH = \"skeleton-v1:skeleton-v2\" Method 2: Source Submodule Checkouts (Work in Progress) \u00b6 Check out a named source as a submodule: git holo source checkout skeleton-v1","title":"Work on Sources"},{"location":"workflows/work-on-sources/#work-on-sources","text":"There are currently two supported methods for working on sources concurrently with working on your project: Environmental source overrides Source submodule checkouts Of the two, environmental source overrides are the more mature feature and recommended for now.","title":"Work on Sources"},{"location":"workflows/work-on-sources/#method-1-environmental-source-overrides-recommended","text":"Environment variables based on the names of sources can be set to override their URL, ref, and optionally holobranch: export HOLO_SOURCE_<SOURCE_NAME> = \"[url][#ref][=>holobranch]\" Source names must be uppercased and all - (hyphen) characters changed to _ (underscore). Existing values can be used by omitting values to the left, but ommitted values to the right will be cleared. The --working option currently has no effect on overridden sources: working tree changes for sources will be ignored. You\u2019ll need to commit any changes to use them in downstream builds, but you don\u2019t need to push those commits and you can rewrite/amend them continuously. For example, give a source name of skeleton-v1 : export HOLO_SOURCE_SKELETON_V1 = \"=>emergence-vfs-site\" # use existing url+ref, override holobranch export HOLO_SOURCE_SKELETON_V1 = \"=>\" # use existing url+ref, clear holobranch export HOLO_SOURCE_SKELETON_V1 = \"#refs/heads/develop\" # use existing url, change ref, clear holobranch export HOLO_SOURCE_SKELETON_V1 = \"#refs/heads/develop=>emergence-skeleton\" # use existing url, change ref, keep holobranch export HOLO_SOURCE_SKELETON_V1 = \"/src/skeleton-v1\" # change url, clear ref+holobranch export HOLO_SOURCE_SKELETON_V1 = \"/src/skeleton-v1#refs/heads/develop=>emergence-skeleton\" # change url+ref, keep holobranch Environmental source overrides will be honored at every depth when using subprojections as sources, so while working on a project using skeleton-v2 as a source, you could work on skeleton-v2 and its source skeleton-v1 simultaneously: export HOLO_SOURCE_SKELETON_V2 = \"/src/skeleton-v2#refs/heads/develop=>emergence-skeleton\" export HOLO_SOURCE_SKELETON_V1 = \"/src/skeleton-v1#refs/heads/develop=>emergence-skeleton\" While working like this, you likely also want to environmentally instruct all hologit commands to always fetch the latest for these sources. This won\u2019t add an appreciable delay for local sources, but could slow down working against remote sources that aren\u2019t changing anyway: export HOLO_FETCH = \"skeleton-v1:skeleton-v2\"","title":"Method 1: Environmental Source Overrides (Recommended)"},{"location":"workflows/work-on-sources/#method-2-source-submodule-checkouts-work-in-progress","text":"Check out a named source as a submodule: git holo source checkout skeleton-v1","title":"Method 2: Source Submodule Checkouts (Work in Progress)"}]}